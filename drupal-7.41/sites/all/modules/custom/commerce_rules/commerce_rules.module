<?php
/**
* implementation of hook_rules_condition_info()
*/

function commerce_rules_rules_condition_info() {
  return array(
    'commerce_rules_check_if_coupon_isnt_alone' => array(
      'label' => t('Check if coupon isnt alone'),
      'parameter' => array(
        'commerce_order' => array(
          'type' => 'commerce_order',
          'label' => t('Order'),
          'wrapped' => TRUE,
        ),
      ),
      'module' => 'commerce_rules',
    ),
    'commerce_rules_is_there_are_any_unique_coupons' => array(
      'label' => t('Is there are any unique coupons'),
      'parameter' => array(
        'commerce_coupon' => array(
          'type' => 'commerce_coupon',
          'label' => t('Coupon'),
          'wrapped' => TRUE,
        ),
        'commerce_order' => array(
          'type' => 'commerce_order',
          'label' => t('Order'),
          'wrapped' => TRUE,
        ),
      ),
      'module' => 'commerce_rules',
    ),
    'commerce_rules_is_coupon_used_by_specific_user' => array(
      'label' => t('Did user used coupon'),
      'parameter' => array(
        'commerce_coupon' => array(
          'type' => 'commerce_coupon',
          'label' => t('Coupon'),
          'wrapped' => TRUE,
        ),
      ),
      'module' => 'commerce_rules',
    )
  );
}

/**
 * Condition is_there_are_any_unique_coupons
 */
function commerce_rules_is_there_are_any_unique_coupons($commerce_coupon, $commerce_order) {
  $coupons = $commerce_order->commerce_coupons->value();
  $present_coupon = $commerce_coupon->value();
  foreach ($coupons as $coupon) {
    if ($coupon->field_unique['und'][0]['value'] == 1 && $coupon !== $present_coupon) {
      return true;
    }
  }
  return false;
}

/**
 * Condition check_if_coupon_isnt_alone
 */
function commerce_rules_check_if_coupon_isnt_alone($commerce_order) {
  $count = count($commerce_order->commerce_coupons);
  return ($count === 1) ? false : true;
}

/**
 * Implements hook_rules_action_info() on behalf of the user module.
 */
function commerce_rules_rules_action_info() {
  return array(
    'commerce_rules_action_delete_last_coupon' => array(
      'label' => t('Delete last coupon'),
      'parameter' => array(
        'commerce_coupon' => array(
          'type' => 'commerce_coupon',
          'label' => t('Coupon'),
          'wrapped' => TRUE,
        ),
        'commerce_order' => array(
          'type' => 'commerce_order',
          'label' => t('Order'),
          'wrapped' => TRUE,
        ),
      ),
      'module' => 'commerce_rules',
    ),
    'commerce_rules_recalculate_total_price' => array(
      'label' => t('Recalculate total price'),
      'parameter' => array(
        'commerce_order' => array(
          'type' => 'commerce_order',
          'label' => t('Order'),
          'wrapped' => TRUE,
        ),
      ),
      'module' => 'commerce_rules',
    ),
  );
}

/**
 * Action Delete last coupon
 */
function commerce_rules_action_delete_last_coupon($commerce_coupon, $commerce_order) {
  $coupon = $commerce_coupon->value();
  $order = $commerce_order->value();
  commerce_coupon_remove_coupon_from_order($order, $coupon);
}


function commerce_rules_recalculate_total_price($commerce_order) {
  $order = $commerce_order->value();
  $count = count ($commerce_order->commerce_coupons->value());
  $items = field_get_items('commerce_order', $order, 'commerce_line_items');
  $end = end ($items);
  $li_id = $end['line_item_id'];
  $l = commerce_line_item_load($li_id);
  $l->quantity = $count;
  commerce_line_item_save($l);
  commerce_order_calculate_total($order);
  commerce_order_save($order);
}

/**
 * Condition if user used coupon
 */
function commerce_rules_is_coupon_used_by_specific_user($commerce_coupon) {
  global $user;
  $uid = $user->uid;
  $coupon_id = $commerce_coupon->value()->coupon_id;
  $usage_by_user = db_select('commerce_coupon_usage_transaction', 'c')
    ->fields('c')
    ->condition('coupon_id', $coupon_id)
    ->condition('uid', $uid)
    ->execute()
    ->rowCount();
  if ($usage_by_user >= 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}